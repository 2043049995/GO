在多个例程对同一个内存资源进行修改，未对资源进行同步限制，会导致修改数据混乱
在对临界区外的数据进行操作时应该获取一个锁，操作完成后释放锁
读写锁：
RWMutex：比如有两个例程，n个在读m个在写数据，如果多个例程同时对某个变量读的话不会产生副作用，但可能读的时候同时也在写，需要控制在读的时候不要进行写操作
写的时候也不能读。
也可以用管道的方式解决数据一致性问题，在一个例程操作完数据后将数据放到管道里，另一个例程在管道中获取数据进行操作（CSP机制）
